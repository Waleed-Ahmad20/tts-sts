# Multi-stage Dockerfile for faster development cycles
FROM python:3.11-slim as base

ENV COQUI_TOS_AGREED=1
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    TZ=UTC \
    LANG=C.UTF-8

# Install system dependencies (this layer rarely changes)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg tesseract-ocr poppler-utils \
    build-essential git wget \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Stage 1: Install Python dependencies (cached layer)
FROM base as dependencies

# Install PyTorch CPU version first (this takes the longest)
RUN pip install --upgrade pip && \
    pip install torch==2.1.2 torchaudio==2.1.2 --index-url https://download.pytorch.org/whl/cpu

# Install transformers with compatible version before TTS
RUN pip install transformers==4.44.2

# Copy and install requirements (only rebuilds if requirements.txt changes)
COPY requirements.txt .
RUN pip install -r requirements.txt

# Stage 2: Development image (lightweight, fast rebuilds)
FROM dependencies as development

# Copy entrypoint script
COPY entrypoint.sh .
RUN chmod +x entrypoint.sh

# Create input/output directories
RUN mkdir -p input output

# Copy application code (this layer rebuilds frequently during development)
COPY app.py .

ENTRYPOINT ["./entrypoint.sh"]

# Stage 3: Production image (minimal, optimized)
FROM dependencies as production

# Copy entrypoint script
COPY entrypoint.sh .
RUN chmod +x entrypoint.sh

# Create input/output directories
RUN mkdir -p input output

# Copy application code
COPY app.py .

# Clean up unnecessary files for production
RUN apt-get autoremove -y build-essential git wget && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENTRYPOINT ["./entrypoint.sh"]
